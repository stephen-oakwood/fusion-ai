

type Query {
  placeholder: String
}

type Subscription {
    agentSendMessage(message: MessageInput): AgentResponse!
}

type AgentResponse {
    processingResult: ProcessingResult!
}

union ProcessingResult = TaskStatusUpdate | TaskArtifactUpdate

type TaskStatusUpdate {
    taskId: String
    contextId: String
    status: TaskStatus
}

type TaskArtifactUpdate {
    taskId: String
    contextId: String
    artifact: Artifact
}

type TaskStatus {
    state: String!
    message: Message
    timestamp: String
}

type Message {
    messageId: String!
    role: String!
    parts: [Part!]!
}

type Artifact {
    artifactId: String!
    name: String
    description: String
    parts: [Part!]!
}

union Part = TextPart | FilePart

type TextPart {
    text: String!
}

type FilePart {
    name: String!
    mimeType: String!
    bytes: String
    uri: String
}

input MessageInput {
    contextId: String
    messageId: String
    text: String!
}
